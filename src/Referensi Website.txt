https://imphnen-landing.vercel.app/?fbclid=IwY2xjawJwuLJleHRuA2FlbQIxMAABHloQINGjBoSM6sc_gqpo3eluKyJMgU0juf-4dUeiPxWyzsrhw_LMa1n3fqxn_aem_dc8UMe9ZgG3cQ6tUarl2AQ

https://imphnen.vercel.app/?fbclid=IwY2xjawJwuRFleHRuA2FlbQIxMAABHiqrcflyLTG1oOvyNFnu6bfjZ9ThGtGynLW5Ifu5v78vuhzKc3hFHVH1_stM_aem_E5ASJVod5Z6ih8zmNzAorQ

https://imphnen-website.vercel.app/?fbclid=IwY2xjawJwuJFleHRuA2FlbQIxMAABHv2EUGOwcrrg_zDzHh5cMYHfJHKZrwwKzaR31bA6_usEigqzF0gnAISt9zzz_aem_910LNaWZYn8RdHfwyEmY1g#about

https://imphnen-six.vercel.app/#tips

https://imphnen.ekel.dev/

https://imphnen-tau.vercel.app/?fbclid=IwY2xjawJr2d5leHRuA2FlbQIxMQABHg2cCffuUaikVOOmfgVEL1Xet39TZ1ulU0mC9D5lbkPSICwUJ6ORInbehoT7_aem_PgOYFp5UQzFTBic2KV2csA#merchandise


import React, { useState, useEffect, useRef } from 'react';
import { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';
import { GeoSearchControl, OpenStreetMapProvider } from 'leaflet-geosearch';
import ReactMarkdown from 'react-markdown';
import 'leaflet/dist/leaflet.css';
import 'leaflet-geosearch/dist/geosearch.css';
import L from 'leaflet';

// Fixing default marker icon issue with Leaflet in React
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
    iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',
    iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png'
});

// Komponen untuk menambahkan kontrol pencarian
function SearchControl({ onSearchResult }) {
    const map = useMap();
    
    useEffect(() => {
        // Inisialisasi provider OpenStreetMap
        const provider = new OpenStreetMapProvider();

        // Buat kontrol pencarian
        const searchControl = new GeoSearchControl({
            provider: provider,
            style: 'bar', // Gaya kontrol pencarian
            autoClose: true, // Tutup hasil pencarian setelah dipilih
            keepResult: true, // Tetap tampilkan marker hasil pencarian
            searchLabel: 'Cari lokasi (contoh: Monas)', // Label placeholder
        });

        // Tambahkan kontrol ke peta
        map.addControl(searchControl);

        // Tangani hasil pencarian
        map.on('geosearch/showlocation', (result) => {
            const { location } = result;
            if (onSearchResult) {
                onSearchResult({
                    lat: location.y,
                    lon: location.x
                });
            }
        });

        // Hapus kontrol saat komponen dibersihkan
        return () => {
            map.removeControl(searchControl);
        };
    }, [onSearchResult]);

    return null;
}

function EnvironmentalHealth() {
    // State untuk lokasi dan data polusi
    const [location, setLocation] = useState(null);
    const [pollutionData, setPollutionData] = useState(null);
    const [weatherData, setWeatherData] = useState(null);
    const [aiAnalysis, setAiAnalysis] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [isAiLoading, setIsAiLoading] = useState(false);
    const [initialLocation, setInitialLocation] = useState(null);

    // Referensi untuk menyimpan marker
    const markerRef = useRef(null);
    const mapRef = useRef(null);

    // API Keys from environment variables
    const OPENWEATHER_API_KEY = import.meta.env.VITE_OPENWEATHER_API_KEY;
    const GEMINI_API_KEY = import.meta.env.VITE_URL;

    // Fungsi untuk mengambil lokasi pengguna menggunakan geolocation
    const getUserLocation = () => {
        setIsLoading(true);
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    const newLocation = {
                        lat: position.coords.latitude,
                        lon: position.coords.longitude
                    };
                    setLocation(newLocation);
                    setInitialLocation(newLocation);
                },
                (error) => {
                    console.error('Error getting location:', error);
                    // Default to a central location if geolocation fails
                    const defaultLocation = { lat: -6.2088, lon: 106.8456 }; // Jakarta
                    setLocation(defaultLocation);
                    setInitialLocation(defaultLocation);
                },
                { enableHighAccuracy: true }
            );
        } else {
            console.error('Geolocation is not supported by this browser.');
            // Default to Jakarta
            const defaultLocation = { lat: -6.2088, lon: 106.8456 };
            setLocation(defaultLocation);
            setInitialLocation(defaultLocation);
        }
    };

    // Fungsi untuk mengambil data dari Gemini
    const fetchGeminiResponse = async (prompt) => {
        if (!GEMINI_API_KEY) {
            console.error('Gemini API key is missing');
            return null;
        }

        try {
            const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY};`
            const res = await fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    contents: [{ parts: [{ text: prompt }] }]
                })
            });

            if (!res.ok) {
                throw new Error('Failed to fetch AI analysis');
            }

            const data = await res.json();
            return data.candidates[0].content.parts[0].text;
        } catch (error) {
            console.error('Error in AI analysis:', error);
            return null;
        }
    };

    // Efek untuk mengambil data polusi dan cuaca ketika lokasi berubah
    useEffect(() => {
        const fetchEnvironmentalData = async () => {
            if (!location || !OPENWEATHER_API_KEY) return;

            try {
                setIsLoading(true);
                // Ambil data polusi
                const pollutionResponse = await fetch(
                    `https://api.openweathermap.org/data/2.5/air_pollution?lat=${location.lat}&lon=${location.lon}&appid=${OPENWEATHER_API_KEY}`
                );
                
                // Ambil data cuaca
                const weatherResponse = await fetch(
                    `https://api.openweathermap.org/data/2.5/weather?lat=${location.lat}&lon=${location.lon}&appid=${OPENWEATHER_API_KEY}&units=metric`
                );
                
                if (!pollutionResponse.ok || !weatherResponse.ok) {
                    throw new Error('Gagal mengambil data lingkungan');
                }
                
                const pollutionData = await pollutionResponse.json();
                const weatherData = await weatherResponse.json();

                setPollutionData(pollutionData.list[0]);
                setWeatherData(weatherData);
            } catch (err) {
                console.error('Error fetching environmental data:', err);
                setPollutionData(null);
                setWeatherData(null);
            } finally {
                setIsLoading(false);
            }
        };

        if (location) {
            fetchEnvironmentalData();
        }
    }, [location, OPENWEATHER_API_KEY]);

    // Fungsi untuk menganalisis data dengan AI
    const handleAiAnalysis = async () => {
        if (!pollutionData || !GEMINI_API_KEY) return;

        try {
            setIsAiLoading(true);
            // Buat prompt untuk analisis AI yang lebih singkat dan efektif
            const prompt = `Analisis data kualitas udara ini secara ringkas:
AQI: ${pollutionData.main.aqi}
CO: ${pollutionData.components.co.toFixed(2)} μg/m³
NO₂: ${pollutionData.components.no2.toFixed(2)} μg/m³
O₃: ${pollutionData.components.o3.toFixed(2)} μg/m³
PM2.5: ${pollutionData.components.pm2_5.toFixed(2)} μg/m³
PM10: ${pollutionData.components.pm10.toFixed(2)} μg/m³

Berikan penilaian singkat dan jelas mengenai risiko kesehatan serta rekomendasi yang perlu dilakukan.`;

            // Ambil analisis AI
            const aiAnalysisText = await fetchGeminiResponse(prompt);
            setAiAnalysis(aiAnalysisText);
        } catch (err) {
            console.error('Error fetching AI analysis:', err);
            setAiAnalysis(null);
        } finally {
            setIsAiLoading(false);
        }
    };

    // Fungsi untuk kembali ke lokasi awal
    const returnToMyLocation = () => {
        if (initialLocation && mapRef.current) {
            mapRef.current.setView([initialLocation.lat, initialLocation.lon], 13);
            setLocation(initialLocation);
        }
    };

    // Efek untuk mengambil lokasi pengguna
    useEffect(() => {
        getUserLocation();
    }, []);

    // Render loading state
    if (isLoading) {
        return (
            <div className="container mx-auto p-4 text-center">
                <p className="text-xl">Memuat data... Harap tunggu.</p>
            </div>
        );
    }

    // Render konten utama
    return (
        <div className="container mx-auto p-4">
            <h1 className="text-2xl font-bold mb-4">Pelacak Polusi Lingkungan</h1>

            {/* Peta Interaktif */}
            {location && (
                <div className="relative">
                    <MapContainer 
                        ref={mapRef}
                        center={[location.lat, location.lon]} 
                        zoom={13} 
                        scrollWheelZoom={true}
                        className="h-[400px] w-full mb-4"
                    >
                        <TileLayer
                            attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                        />
                        <SearchControl onSearchResult={setLocation} />
                        <Marker 
                            ref={markerRef}
                            position={[location.lat, location.lon]}
                        >
                            <Popup>
                                Lokasi: {location.lat.toFixed(4)}, {location.lon.toFixed(4)}
                            </Popup>
                        </Marker>
                    </MapContainer>
                    {/* Tombol Kembali ke Lokasi Saya */}
                    <button 
                        onClick={returnToMyLocation}
                        className="absolute z-[1000] top-4 right-4 bg-white border border-gray-300 rounded-lg px-3 py-2 shadow-md hover:bg-gray-100"
                    >
                        🏠 Kembali ke Lokasi Saya
                    </button>
                </div>
            )}

            {/* Informasi Cuaca */}
            {weatherData && (
                <div className="mt-4 p-4 bg-blue-100 rounded-lg">
                    <h2 className="text-xl font-bold mb-2">Informasi Cuaca</h2>
                    <div className="grid grid-cols-2 gap-2">
                        <div>
                            <strong>Suhu:</strong> {weatherData.main.temp}°C
                        </div>
                        <div>
                            <strong>Terasa Seperti:</strong> {weatherData.main.feels_like}°C
                        </div>
                        <div>
                            <strong>Cuaca:</strong> {weatherData.weather[0].description}
                        </div>
                        <div>
                            <strong>Kelembaban:</strong> {weatherData.main.humidity}%
                        </div>
                        <div>
                            <strong>Kecepatan Angin:</strong> {weatherData.wind.speed} m/s
                        </div>
                        <div>
                            <strong>Awan:</strong> {weatherData.clouds.all}%
                        </div>
                    </div>
                </div>
            )}

            {/* Informasi Polusi */}
            {pollutionData && (
                <div className="mt-4 p-4 bg-gray-100 rounded-lg">
                    <h2 className="text-xl font-bold mb-2">Data Polusi Terperinci</h2>
                    <div className="grid grid-cols-2 gap-2">
                        <div>
                            <strong>Indeks Kualitas Udara (AQI):</strong> {pollutionData.main.aqi}
                        </div>
                        <div>
                            <strong>CO:</strong> {pollutionData.components.co.toFixed(2)} μg/m³
                        </div>
                        <div>
                            <strong>NO₂:</strong> {pollutionData.components.no2.toFixed(2)} μg/m³
                        </div>
                        <div>
                            <strong>O₃:</strong> {pollutionData.components.o3.toFixed(2)} μg/m³
                        </div>
                        <div>
                            <strong>PM2.5:</strong> {pollutionData.components.pm2_5.toFixed(2)} μg/m³
                        </div>
                        <div>
                            <strong>PM10:</strong> {pollutionData.components.pm10.toFixed(2)} μg/m³
                        </div>
                    </div>

                    {/* Tombol Analisis AI */}
                    <div className="mt-4">
                        <button 
                            onClick={handleAiAnalysis} 
                            disabled={isAiLoading}
                            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:bg-blue-300"
                        >
                            {isAiLoading ? 'Menganalisis...' : 'Analisis dengan AI'}
                        </button>
                    </div>
                </div>
            )}

            {/* Analisis AI */}
            {aiAnalysis && (
                <div className="mt-4 p-4 bg-blue-100 rounded-lg">
                    <h2 className="text-xl font-bold mb-2">Analisis Kualitas Udara</h2>
                    <ReactMarkdown>{aiAnalysis}</ReactMarkdown>
                </div>
            )}
        </div>
    );
}

export default EnvironmentalHealth;

~~~Versi Gemini~~~
import React, { useState, useEffect, useRef } from "react";
import { MapContainer, TileLayer, Marker, Popup, useMap } from "react-leaflet";
import { GeoSearchControl, OpenStreetMapProvider } from "leaflet-geosearch";
import ReactMarkdown from "react-markdown";
import "leaflet/dist/leaflet.css";
import "leaflet-geosearch/dist/geosearch.css";
import L from "leaflet";
import { motion, useAnimation } from "framer-motion"; // Import useAnimation
// Assuming useScrollAnimations is a custom hook you have defined elsewhere
// For this example, we'll mock it or define basic variants if not fully provided.
// import useScrollAnimations from "../../components/AnimasiScroll"; 
import { Cloud, MapPin, Wind, Brain, Loader2, LocateFixed, Search } from "lucide-react"; // Added Loader2, LocateFixed, Search

// Fixing default marker icon issue with Leaflet in React
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl:
    "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png",
  iconUrl:
    "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png",
  shadowUrl:
    "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png",
});

// Mock implementation of useScrollAnimations if not provided
// In your actual code, this would come from your project structure.
const useScrollAnimations = () => {
  const refs = {
    container: useRef(null),
    // Add other refs if your hook uses them
  };
  const controls = {
    // Mock controls, replace with actual useAnimation if needed for each section
    container: useAnimation(), 
  };
  
  // Basic section variants, you might have more complex ones from your hook
  const sectionVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5 } },
  };

  // Example: Trigger animation when the container ref is in view
  // You'd need react-intersection-observer for this typically
  // For simplicity, we'll assume it's handled or not strictly needed for this refactor
  
  return { refs, controls, sectionVariants };
};


// Komponen untuk menambahkan kontrol pencarian (User's version)
function LeafletSearchControl({ onSearchResult }) { // Renamed to avoid conflict if you use the other SearchControl
  const map = useMap();

  useEffect(() => {
    const provider = new OpenStreetMapProvider();
    const searchControl = new GeoSearchControl({
      provider: provider,
      style: "bar",
      autoClose: true,
      keepResult: true,
      searchLabel: "Cari lokasi (contoh: Monas)",
      marker: { // Custom marker for search result
        icon: new L.Icon.Default(),
        draggable: false,
      },
      // position: 'topleft', // You can adjust the position
    });

    map.addControl(searchControl);

    const onResult = (result) => {
        const { location } = result; // location here is an object with x, y, label
         if (onSearchResult) {
            onSearchResult({
                lat: location.y, // latitude
                lon: location.x, // longitude
                name: location.label, // display name
            });
        }
        // The GeoSearchControl itself will fly to the location and add a marker.
    };
    
    map.on("geosearch/showlocation", onResult);

    return () => {
      map.removeControl(searchControl);
      map.off("geosearch/showlocation", onResult);
    };
  }, [map, onSearchResult]);

  return null;
}

// Weather Icons Mapping (as requested)
const symbolWeather = {
  '01d': { symbol: '☀️', label: 'Cerah (Siang)' },
  '01n': { symbol: '🌙', label: 'Cerah (Malam)' },
  '02d': { symbol: '🌤️', label: 'Sedikit Berawan (Siang)' },
  '02n': { symbol: '☁️', label: 'Sedikit Berawan (Malam)' }, // Changed for nighttime consistency
  '03d': { symbol: '☁️', label: 'Berawan Tersebar (Siang)' },
  '03n': { symbol: '☁️', label: 'Berawan Tersebar (Malam)' },
  '04d': { symbol: '🌥️', label: 'Berawan (Siang)' }, 
  '04n': { symbol: '🌥️', label: 'Berawan (Malam)' }, 
  '09d': { symbol: '🌧️', label: 'Hujan Ringan (Siang)' }, 
  '09n': { symbol: '🌧️', label: 'Hujan Ringan (Malam)' }, 
  '10d': { symbol: '🌦️', label: 'Hujan (Siang)' },
  '10n': { symbol: '🌧️', label: 'Hujan (Malam)' }, // Changed for nighttime consistency
  '11d': { symbol: '⛈️', label: 'Badai Petir (Siang)' },
  '11n': { symbol: '⛈️', label: 'Badai Petir (Malam)' },
  '13d': { symbol: '❄️', label: 'Salju (Siang)' },
  '13n': { symbol: '❄️', label: 'Salju (Malam)' },
  '50d': { symbol: '🌫️', label: 'Berkabut (Siang)' }, 
  '50n': { symbol: '🌫️', label: 'Berkabut (Malam)' },
  'default': { symbol: '❓', label: 'Cuaca Tidak Diketahui' }
};


// Enhanced Weather Display Component
const WeatherDisplay = ({ weatherData }) => {
  if (!weatherData || !weatherData.weather || !weatherData.weather[0]) {
    return <div className="text-center py-4">Data cuaca tidak tersedia.</div>;
  }
  const weatherIconCode = weatherData.weather[0].icon;
  const { symbol, label } = symbolWeather[weatherIconCode] || symbolWeather['default'];

  return (
    // This is the part the user selected and wants to improve
    <div className="space-y-4 p-1"> {/* Added a bit of padding */}
      <div className="flex items-center justify-between mb-3">
        <p className="text-5xl sm:text-6xl">{symbol}</p>
        <div className="text-right">
          <p className="text-3xl sm:text-4xl font-bold text-[#01130c] dark:text-[#ecfef7]">
            {Math.round(weatherData.main.temp)}°C 
          </p>
          <p className="text-sm text-[#01130c]/80 dark:text-[#ecfef7]/80 capitalize">
            {label}
          </p>
        </div>
      </div>
      <div className="grid grid-cols-2 gap-x-4 gap-y-3 text-sm text-[#01130c]/80 dark:text-[#ecfef7]/80">
        <div>
          <strong className="block text-xs text-[#01130c]/70 dark:text-[#ecfef7]/70">Terasa Seperti</strong> 
          <span className="text-base font-medium text-[#01130c] dark:text-[#ecfef7]">{Math.round(weatherData.main.feels_like)}°C</span>
        </div>
        <div>
          <strong className="block text-xs text-[#01130c]/70 dark:text-[#ecfef7]/70">Kelembaban</strong>
          <span className="text-base font-medium text-[#01130c] dark:text-[#ecfef7]">{weatherData.main.humidity}%</span>
        </div>
        <div>
          <strong className="block text-xs text-[#01130c]/70 dark:text-[#ecfef7]/70">Angin</strong>
          <span className="text-base font-medium text-[#01130c] dark:text-[#ecfef7]">{weatherData.wind.speed} m/s</span>
        </div>
        <div>
          <strong className="block text-xs text-[#01130c]/70 dark:text-[#ecfef7]/70">Tutupan Awan</strong>
          <span className="text-base font-medium text-[#01130c] dark:text-[#ecfef7]">{weatherData.clouds.all}%</span>
        </div>
      </div>
      <p className="text-xs text-center text-[#01130c]/60 dark:text-[#ecfef7]/60 pt-3 capitalize">
        {weatherData.weather[0].description}
      </p>
    </div>
  );
};


function EnvironmentalHealth() {
  const [location, setLocation] = useState(null);
  const [pollutionData, setPollutionData] = useState(null);
  const [weatherData, setWeatherData] = useState(null);
  const [aiAnalysis, setAiAnalysis] = useState(null);
  const [isLoading, setIsLoading] = useState(true); // For initial page load
  const [isDataLoading, setIsDataLoading] = useState(false); // For subsequent data fetches
  const [isAiLoading, setIsAiLoading] = useState(false);
  const [initialLocation, setInitialLocation] = useState(null); // To store user's first detected location
  const [error, setError] = useState(null); // For displaying errors

  const markerRef = useRef(null);
  const mapRef = useRef(null);

  const { refs, controls, sectionVariants } = useScrollAnimations();
  const itemVariants = {
    hidden: { opacity: 0, y: 20, scale: 0.98 },
    visible: {
      opacity: 1, y: 0, scale: 1,
      transition: { duration: 0.5, ease: [0.16, 0.77, 0.47, 0.97] },
    },
  };

  const OPENWEATHER_API_KEY = import.meta.env.VITE_OPENWEATHER_API_KEY;
  const GEMINI_API_KEY = import.meta.env.VITE_URL; // Assuming VITE_URL is your Gemini API endpoint or key

  const getUserLocation = () => {
    setIsLoading(true); // For the very first load
    setError(null);
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        async (position) => {
          const newLocation = {
            lat: position.coords.latitude,
            lon: position.coords.longitude,
          };
          // Fetch location name
          try {
            const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${newLocation.lat}&lon=${newLocation.lon}`);
            const data = await response.json();
            newLocation.name = data.display_name || `${newLocation.lat.toFixed(4)}, ${newLocation.lon.toFixed(4)}`;
          } catch (e) {
            console.error("Error fetching location name:", e);
            newLocation.name = `${newLocation.lat.toFixed(4)}, ${newLocation.lon.toFixed(4)}`;
          }
          setLocation(newLocation);
          if (!initialLocation) setInitialLocation(newLocation); // Set initial location only once
          setIsLoading(false);
        },
        (error) => {
          console.error("Error getting location:", error);
          setError("Gagal mendapatkan lokasi Anda. Menggunakan lokasi default (Jakarta).");
          const defaultLocation = { lat: -6.2088, lon: 106.8456, name: "Jakarta, Indonesia" };
          setLocation(defaultLocation);
          if (!initialLocation) setInitialLocation(defaultLocation);
          setIsLoading(false);
        },
        { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }
      );
    } else {
      console.error("Geolocation is not supported by this browser.");
      setError("Geolocation tidak didukung. Menggunakan lokasi default (Jakarta).");
      const defaultLocation = { lat: -6.2088, lon: 106.8456, name: "Jakarta, Indonesia" };
      setLocation(defaultLocation);
      if (!initialLocation) setInitialLocation(defaultLocation);
      setIsLoading(false);
    }
  };

  useEffect(() => {
    getUserLocation(); // Get user location on initial mount
  }, []); // Empty dependency array ensures this runs only once on mount

  
  useEffect(() => {
    const fetchEnvironmentalData = async () => {
      if (!location || !OPENWEATHER_API_KEY) {
        if (!OPENWEATHER_API_KEY) console.error("OpenWeather API key is missing!");
        return;
      }
      
      setIsDataLoading(true);
      setError(null);
      setAiAnalysis(null); // Clear previous AI analysis

      try {
        const pollutionResponse = await fetch(
          `https://api.openweathermap.org/data/2.5/air_pollution?lat=${location.lat}&lon=${location.lon}&appid=${OPENWEATHER_API_KEY}`
        );
        const weatherResponse = await fetch(
          `https://api.openweathermap.org/data/2.5/weather?lat=${location.lat}&lon=${location.lon}&appid=${OPENWEATHER_API_KEY}&units=metric&lang=id`
        );

        if (!pollutionResponse.ok) throw new Error(`Gagal mengambil data polusi: ${pollutionResponse.statusText}`);
        if (!weatherResponse.ok) throw new Error(`Gagal mengambil data cuaca: ${weatherResponse.statusText}`);

        const pollutionDataResult = await pollutionResponse.json();
        const weatherDataResult = await weatherResponse.json();

        setPollutionData(pollutionDataResult.list && pollutionDataResult.list[0] ? pollutionDataResult.list[0] : null);
        setWeatherData(weatherDataResult);

      } catch (err) {
        console.error("Error fetching environmental data:", err);
        setError(`Gagal memuat data lingkungan: ${err.message}. Coba lagi nanti.`);
        setPollutionData(null);
        setWeatherData(null);
      } finally {
        setIsDataLoading(false);
        setIsLoading(false); // Ensure main loading is also false
      }
    };

    if (location) {
      fetchEnvironmentalData();
    }
  }, [location, OPENWEATHER_API_KEY]);


  const handleAiAnalysis = async () => {
    if (!pollutionData || !weatherData) {
        setError("Data polusi atau cuaca tidak lengkap untuk analisis AI.");
        return;
    }
    if (!GEMINI_API_KEY) {
      console.error("Gemini API key/URL is missing");
      setError("Konfigurasi AI tidak lengkap.");
      return null;
    }

    setIsAiLoading(true);
    setError(null);

    const getAqiInfoLocal = (aqi) => { // Local helper for AQI description
        if (aqi === 1) return "Baik";
        if (aqi === 2) return "Sedang";
        if (aqi === 3) return "Tidak Sehat (Kelompok Sensitif)";
        if (aqi === 4) return "Tidak Sehat";
        if (aqi === 5) return "Sangat Tidak Sehat";
        return "Berbahaya";
    };

    try {
      const prompt = `Analisis kondisi kualitas udara saat ini di ${location.name || 'lokasi terpilih'} berdasarkan data berikut:
Cuaca: ${weatherData.weather[0].description}, Suhu ${weatherData.main.temp}°C (terasa ${weatherData.main.feels_like}°C), Kelembaban ${weatherData.main.humidity}%, Angin ${weatherData.wind.speed} m/s.
Indeks Kualitas Udara (AQI): ${pollutionData.main.aqi} (${getAqiInfoLocal(pollutionData.main.aqi)})
Komponen Polutan (μg/m³): CO: ${pollutionData.components.co.toFixed(2)}, NO₂: ${pollutionData.components.no2.toFixed(2)}, O₃: ${pollutionData.components.o3.toFixed(2)}, PM2.5: ${pollutionData.components.pm2_5.toFixed(2)}, PM10: ${pollutionData.components.pm10.toFixed(2)}.

Berikan analisis singkat (2-3 paragraf ringkas) dalam format Markdown mengenai:
1. Status kualitas udara umum dan dampaknya.
2. Potensi dampak kesehatan dari polutan dominan.
3. Rekomendasi praktis singkat untuk masyarakat.`;

      // This is your fetchGeminiResponse function
      const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`; // Ensure this is the correct model and key variable
      const res = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          contents: [{ parts: [{ text: prompt }] }],
        }),
      });

      if (!res.ok) {
        const errorBody = await res.json();
        console.error("AI API Error:", errorBody);
        throw new Error(`Gagal mengambil analisis AI: ${errorBody.error?.message || res.statusText}`);
      }

      const data = await res.json();
      if (data.candidates && data.candidates[0] && data.candidates[0].content && data.candidates[0].content.parts && data.candidates[0].content.parts[0]) {
        setAiAnalysis(data.candidates[0].content.parts[0].text);
      } else {
        throw new Error("Format respons AI tidak sesuai.");
      }

    } catch (err) {
      console.error("Error fetching AI analysis:", err);
      setError(`Analisis AI gagal: ${err.message}`);
      setAiAnalysis(null);
    } finally {
      setIsAiLoading(false);
    }
  };
  
  const handleLocationSearchResult = (newLocation) => {
    // newLocation should be { lat, lon, name }
    setLocation(newLocation); // This will trigger the useEffect to fetch new data
    if (mapRef.current) {
        mapRef.current.flyTo([newLocation.lat, newLocation.lon], 13);
    }
  };

  const returnToMyLocation = () => {
    if (initialLocation) {
      setLocation(initialLocation); // Set location back to the user's initial detected location
      if (mapRef.current) {
        mapRef.current.flyTo([initialLocation.lat, initialLocation.lon], 13);
      }
    } else {
        getUserLocation(); // If initial location wasn't set for some reason, try to get it again
    }
  };

  // Update map view when location state changes
  useEffect(() => {
    if (location && mapRef.current) {
      mapRef.current.flyTo([location.lat, location.lon], mapRef.current.getZoom());
    }
    if (location && markerRef.current) {
        markerRef.current.setLatLng([location.lat, location.lon]);
         markerRef.current.setPopupContent(`<b>${location.name || 'Lokasi Terpilih'}</b><br>Lat: ${location.lat.toFixed(4)}, Lon: ${location.lon.toFixed(4)}`);
    }
  }, [location]);


  if (isLoading && !location) { // Show full page loader only on initial load and if location is not yet set
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-[#f6fefc] dark:bg-[#010907] text-[#01130c] dark:text-[#ecfef7]">
        <Loader2 className="w-16 h-16 animate-spin text-[#1ff498]" />
        <p className="mt-4 text-xl">Mencari lokasi Anda dan memuat data...</p>
      </div>
    );
  }
  
  // AQI Info for Pollution Section
  const getAqiStyling = (aqi) => {
    if (aqi === 1) return { level: "Baik", color: "text-green-600 dark:text-green-400", bgColor: "bg-green-500/10 dark:bg-green-400/10" };
    if (aqi === 2) return { level: "Sedang", color: "text-yellow-600 dark:text-yellow-400", bgColor: "bg-yellow-500/10 dark:bg-yellow-400/10" };
    if (aqi === 3) return { level: "Tidak Sehat (Sensitif)", color: "text-orange-600 dark:text-orange-400", bgColor: "bg-orange-500/10 dark:bg-orange-400/10" };
    if (aqi === 4) return { level: "Tidak Sehat", color: "text-red-600 dark:text-red-400", bgColor: "bg-red-500/10 dark:bg-red-400/10" };
    if (aqi === 5) return { level: "Sangat Tidak Sehat", color: "text-purple-600 dark:text-purple-400", bgColor: "bg-purple-500/10 dark:bg-purple-400/10" };
    return { level: "Berbahaya", color: "text-maroon-700 dark:text-maroon-500", bgColor: "bg-maroon-500/10 dark:bg-maroon-400/10" };
  };


  return (
    <div
      className="bg-[#f6fefc] dark:bg-[#010907] text-[#01130c] dark:text-[#ecfef7] min-h-screen p-4 md:p-6 lg:p-8 space-y-6 lg:space-y-8"
      ref={refs.container} // Assuming this ref is for the overall container scroll animation
      id="content"
    >
      {error && (
        <motion.div 
            initial={{opacity: 0, y: -10}} animate={{opacity:1, y:0}}
            className="p-4 mb-4 text-sm text-red-700 bg-red-100 rounded-lg dark:bg-red-900/30 dark:text-red-300" role="alert">
          <span className="font-medium">Oops!</span> {error}
        </motion.div>
      )}

      {/* Section 1: Map and Weather (Side-by-side) */}
      <motion.section 
        variants={sectionVariants} initial="hidden" animate="visible" // Animate this section
        className="grid md:grid-cols-5 gap-6 lg:gap-8 items-start"
      >
        {/* Map Container */}
        <motion.div
          variants={itemVariants} // Animate this item
          className="md:col-span-3 relative bg-white dark:bg-slate-800/50 border border-slate-200 dark:border-slate-700 
            rounded-2xl p-4 sm:p-6 shadow-lg hover:shadow-xl transition-all duration-300"
        >
          <div className="inline-block bg-[#1ff498]/20 dark:bg-[#0be084]/20 text-[#01130c] dark:text-[#ecfef7] px-4 py-1.5 rounded-full mb-4">
            <span className="flex items-center text-sm font-medium">
              <MapPin className="w-4 h-4 mr-2 text-[#10b981] dark:text-[#34d399]" />
              Peta Interaktif
            </span>
          </div>
          {location ? (
            <MapContainer
              ref={mapRef}
              center={[location.lat, location.lon]}
              zoom={13}
              scrollWheelZoom={true}
              className="h-[400px] md:h-[450px] lg:h-[500px] w-full rounded-lg z-0" // z-0 for search control
            >
              <TileLayer
                attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
              />
              <LeafletSearchControl onSearchResult={handleLocationSearchResult} />
              <Marker ref={markerRef} position={[location.lat, location.lon]}>
                <Popup>
                  <b>{location.name || 'Lokasi Saat Ini'}</b><br />
                  Lat: {location.lat.toFixed(4)}, Lon: {location.lon.toFixed(4)}
                </Popup>
              </Marker>
            </MapContainer>
          ) : (
            <div className="h-[400px] md:h-[450px] lg:h-[500px] w-full rounded-lg flex items-center justify-center bg-slate-100 dark:bg-slate-700/50">
              <Loader2 className="w-8 h-8 animate-spin text-[#1ff498]" />
              <p className="ml-2 text-slate-500 dark:text-slate-400">Memuat peta...</p>
            </div>
          )}
          <motion.button
            onClick={returnToMyLocation}
            whileHover={{ scale: 1.05, backgroundColor: darkMode ? '#07798d' : '#72e4f8' }} // Use actual color values
            whileTap={{ scale: 0.95 }}
            className="absolute z-[1000] top-4 right-4 md:top-5 md:right-5 bg-white dark:bg-slate-700 
              border border-slate-300 dark:border-slate-600 
              rounded-lg px-3 py-1.5 shadow-md hover:shadow-lg text-[#01130c] dark:text-[#ecfef7] 
              transition-all duration-200 flex items-center text-xs sm:text-sm"
            disabled={isDataLoading || isLoading}
          >
            <LocateFixed className="w-4 h-4 mr-1.5" />
            Lokasi Saya
          </motion.button>
        </motion.div>

        {/* Weather Info Card */}
        <motion.div
          variants={itemVariants} // Animate this item
          className="md:col-span-2 bg-white dark:bg-slate-800/50 border border-slate-200 dark:border-slate-700 
            p-4 sm:p-6 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 h-full flex flex-col"
        >
          <div className="inline-block bg-[#1ff498]/20 dark:bg-[#0be084]/20 text-[#01130c] dark:text-[#ecfef7] px-4 py-1.5 rounded-full mb-4 self-start">
            <span className="flex items-center text-sm font-medium">
              <Cloud className="w-4 h-4 mr-2 text-[#10b981] dark:text-[#34d399]" />
              Informasi Cuaca
            </span>
          </div>
          <div className="flex-grow flex flex-col justify-center">
            {isDataLoading && !weatherData && (
                 <div className="flex flex-col items-center justify-center h-full">
                    <Loader2 className="w-8 h-8 animate-spin text-[#1ff498]" />
                    <p className="mt-2 text-sm text-slate-500 dark:text-slate-400">Memuat cuaca...</p>
                 </div>
            )}
            {!isDataLoading && weatherData && <WeatherDisplay weatherData={weatherData} />}
            {!isDataLoading && !weatherData && <p className="text-center text-sm text-slate-500 dark:text-slate-400">Data cuaca tidak tersedia untuk lokasi ini.</p>}
          </div>
        </motion.div>
      </motion.section>

      {/* Section 2: Pollution Data */}
      {pollutionData && !isDataLoading && (
        <motion.section variants={sectionVariants} initial="hidden" animate="visible">
          <motion.div
            variants={itemVariants}
            className="bg-white dark:bg-slate-800/50 border border-slate-200 dark:border-slate-700 
              p-4 sm:p-6 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300"
          >
            <div className="inline-block bg-[#1ff498]/20 dark:bg-[#0be084]/20 text-[#01130c] dark:text-[#ecfef7] px-4 py-1.5 rounded-full mb-4">
              <span className="flex items-center text-sm font-medium">
                <Wind className="w-4 h-4 mr-2 text-[#10b981] dark:text-[#34d399]" />
                Data Polusi Udara
              </span>
            </div>
            {pollutionData.main && pollutionData.components ? (
                <>
                    <div className={`mb-4 p-3 rounded-lg flex items-center justify-between text-sm ${getAqiStyling(pollutionData.main.aqi).bgColor}`}>
                        <span className="font-semibold text-[#01130c] dark:text-[#ecfef7]">Indeks Kualitas Udara (AQI):</span>
                        <span className={`font-bold px-2.5 py-1 rounded-full ${getAqiStyling(pollutionData.main.aqi).color}`}>
                            {pollutionData.main.aqi} - {getAqiStyling(pollutionData.main.aqi).level}
                        </span>
                    </div>
                    <div className="grid grid-cols-2 sm:grid-cols-3 gap-x-4 gap-y-3 text-sm text-[#01130c]/90 dark:text-[#ecfef7]/90">
                    {Object.entries(pollutionData.components).map(([key, value]) => (
                        <div key={key} className="p-2 bg-slate-50 dark:bg-slate-700/50 rounded-md">
                        <strong className="block text-xs text-[#01130c]/70 dark:text-[#ecfef7]/70 uppercase">{key.replace(/_/g, '.').replace('pm25', 'PM2.5')}:</strong>
                        <span className="text-base font-medium text-[#01130c] dark:text-[#ecfef7]">
                            {typeof value === 'number' ? value.toFixed(2) : value} µg/m³
                        </span>
                        </div>
                    ))}
                    </div>
                    <motion.div className="mt-6 text-center sm:text-left" variants={itemVariants}>
                    <motion.button
                        onClick={handleAiAnalysis}
                        disabled={isAiLoading || isDataLoading}
                        whileHover={{ scale: 1.03, boxShadow: "0px 5px 15px rgba(31, 244, 152, 0.3)" }}
                        whileTap={{ scale: 0.97 }}
                        className="bg-gradient-to-r from-[#1ff498] to-[#50b7f7] hover:from-[#1ddc8c] hover:to-[#43a2dc] text-slate-900 font-semibold px-6 py-2.5 rounded-lg shadow-md  
                        disabled:opacity-60 disabled:cursor-not-allowed transition-all duration-300 flex items-center justify-center mx-auto sm:mx-0"
                    >
                        {isAiLoading ? (
                        <> <Loader2 className="w-5 h-5 mr-2 animate-spin" /> Menganalisis... </>
                        ) : (
                        <> <Brain className="w-5 h-5 mr-2" /> Analisis dengan AI </>
                        )}
                    </motion.button>
                    </motion.div>
                </>
            ) : (
                <p className="text-center text-sm text-slate-500 dark:text-slate-400">Data polusi tidak lengkap untuk lokasi ini.</p>
            )}
          </motion.div>
        </motion.section>
      )}
      {isDataLoading && !pollutionData && ( // Loader for pollution section if data is still fetching
            <div className="flex flex-col items-center justify-center p-10 bg-white dark:bg-slate-800/50 rounded-2xl shadow-lg">
                <Loader2 className="w-8 h-8 animate-spin text-[#1ff498]" />
                <p className="mt-2 text-sm text-slate-500 dark:text-slate-400">Memuat data polusi...</p>
            </div>
      )}


      {/* Section 3: AI Analysis */}
      {aiAnalysis && !isAiLoading && (
        <motion.section variants={sectionVariants} initial="hidden" animate="visible">
          <motion.div
            variants={itemVariants}
            className="bg-white dark:bg-slate-800/50 border border-slate-200 dark:border-slate-700 
              p-4 sm:p-6 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300"
          >
            <div className="inline-block bg-[#1ff498]/20 dark:bg-[#0be084]/20 text-[#01130c] dark:text-[#ecfef7] px-4 py-1.5 rounded-full mb-4">
              <span className="flex items-center text-sm font-medium">
                <Brain className="w-4 h-4 mr-2 text-[#10b981] dark:text-[#34d399]" />
                Analisis Kualitas Udara (AI)
              </span>
            </div>
            <div className="prose prose-sm dark:prose-invert 
                            prose-p:text-[#01130c]/90 dark:prose-p:text-[#ecfef7]/90 
                            prose-headings:text-[#01130c] dark:prose-headings:text-[#ecfef7] 
                            prose-strong:text-[#01130c] dark:prose-strong:text-[#ecfef7]
                            prose-li:text-[#01130c]/90 dark:prose-li:text-[#ecfef7]/90
                            max-w-none leading-relaxed">
              <ReactMarkdown>{aiAnalysis}</ReactMarkdown>
            </div>
          </motion.div>
        </motion.section>
      )}
       {isAiLoading && ( // Loader for AI Analysis section
            <div className="flex flex-col items-center justify-center p-10 bg-white dark:bg-slate-800/50 rounded-2xl shadow-lg">
                <Loader2 className="w-8 h-8 animate-spin text-[#1ff498]" />
                <p className="mt-2 text-sm text-slate-500 dark:text-slate-400">AI sedang menganalisis...</p>
            </div>
      )}

    </div>
  );
}

export default EnvironmentalHealth;
